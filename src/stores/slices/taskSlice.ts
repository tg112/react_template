import { createSlice } from '@reduxjs/toolkit';
import { RootState } from '../store';

type Task = {
  id: number;
  title: string;
  completed: boolean;
};

type TaskState = {
  idCount: number;
  tasks: Task[];
};

const initialState: TaskState = {
  idCount: 3,
  tasks: [
    {
      id: 1,
      title: 'TASK 1',
      completed: false
    },
    {
      id: 2,
      title: 'TASK 2',
      completed: true
    },
    {
      id: 3,
      title: 'TASK 3',
      completed: false
    }
  ]
};

export const taskSlice = createSlice({
  name: 'task',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    newTask: (state, action) => {
      state.idCount += 1;
      const newItem = {
        id: state.idCount,
        title: action.payload,
        completed: false
      };

      state.tasks = [newItem, ...state.tasks];
    },
    completeTask: (state, action) => {
      // ここのstateはinitialState
      const task = state.tasks.find((task) => task.id === action.payload.id);
      if (task) {
        task.completed = !task.completed;
      }
    },
    deleteTask: (state, action) => {
      state.tasks = state.tasks.filter((task) => task.id !== action.payload.id);
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {}
});

export const { newTask, completeTask, deleteTask } = taskSlice.actions;

// 下記のステートは、storeに登録したstate
export const selectTasks = (state: RootState) => state.task.tasks;

export default taskSlice.reducer;
